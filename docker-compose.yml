
services:
  api:
    build: ./api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/data
    environment:
      DELTA_LAKE_PATH: /data/delta
      PROCESSED_DATA_PATH: /data/structured
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark:
    build: ./spark
    image: spark:local
    container_name: spark
    volumes:
      - ./trusted_zone:/app/trusted_zone
      - ./data:/data
      - ./spark:/app
    environment:
      DELTA_LAKE_PATH: /data/delta
      LOG_DATA_PATH: /data/log_data
      PHOTO_DIR: /data/unstructured/profile_photos
    command: ["tail", "-f", "/dev/null"]
    depends_on:
      - api

  streaming:
    build: ./spark
    command: ["tail", "-f", "/dev/null"]
    volumes:
      - ./data:/data
    environment:
      DELTA_LAKE_PATH: /data/delta
      LOG_DATA_PATH: /data/log_data
    depends_on:
      - api
    restart: unless-stopped

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-init:
    image: apache/airflow:2.6.3
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      HOST_DAGS_PATH:            ${PWD}/dags
      HOST_TRUSTED_ZONE_PATH:    ${PWD}/trusted_zone
      HOST_EXPLOIT_ZONE_PATH:    ${PWD}/exploitation_zone
      HOST_ML_PATH:              ${PWD}/ML
      HOST_DATA_PATH:            ${PWD}/data

      # **CONTAINER** paths, for your DAG to read/write:
      DAGS_PATH:                 /opt/airflow/dags
      TRUSTED_ZONE_PATH:         /opt/airflow/trusted_zone
      EXPLOIT_ZONE_PATH:         /opt/airflow/exploitation_zone
      ML_PATH:                   /opt/airflow/ML
      DATA_PATH:                 /data
      DUCKDB_PATH:               /data/exploitation_zone.duckdb

      # other envs…
      PINECONE_API_KEY:          ${PINECONE_API_KEY}
      PINECONE_ENV:              ${PINECONE_ENV:-us-east-1}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dags:/opt/airflow/dags
      - ./trusted_zone:/opt/airflow/trusted_zone
      - ./exploitation_zone:/opt/airflow/exploitation_zone
      - ./ML:/opt/airflow/ML
      - ./data:/data
    command: >
      bash -c '
        until airflow db check; do sleep 5; done &&
        airflow db init || true &&
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com || true &&
        airflow connections add api_connection \
          --conn-type http \
          --conn-host api \
          --conn-port 8000 || true
      '
    depends_on:
      - postgres

  airflow-webserver:
    image: apache/airflow:2.6.3
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      HOST_DAGS_PATH:            ${PWD}/dags
      HOST_TRUSTED_ZONE_PATH:    ${PWD}/trusted_zone
      HOST_EXPLOIT_ZONE_PATH:    ${PWD}/exploitation_zone
      HOST_ML_PATH:              ${PWD}/ML
      HOST_DATA_PATH:            ${PWD}/data

      # **CONTAINER** paths, for your DAG to read/write:
      DAGS_PATH:                 /opt/airflow/dags
      TRUSTED_ZONE_PATH:         /opt/airflow/trusted_zone
      EXPLOIT_ZONE_PATH:         /opt/airflow/exploitation_zone
      ML_PATH:                   /opt/airflow/ML
      DATA_PATH:                 /data
      DUCKDB_PATH:               /data/exploitation_zone.duckdb

      # other envs…
      PINECONE_API_KEY:          ${PINECONE_API_KEY}
      PINECONE_ENV:              ${PINECONE_ENV:-us-east-1}

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/dags:/opt/airflow/dags
      - ${PWD}/trusted_zone:/opt/airflow/trusted_zone
      - ${PWD}/exploitation_zone:/opt/airflow/exploitation_zone
      - ${PWD}/ML:/opt/airflow/ML
      - ${PWD}/data:/data
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    user: "0:0"
    command: >
      bash -c '
        rm -rf /var/lib/apt/lists/* &&
        mkdir -p /var/lib/apt/lists/partial &&
        apt-get update &&
        apt-get install -y mailutils &&
        airflow webserver
      '
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - airflow-init

  airflow-scheduler:
    image: apache/airflow:2.6.3
    user: "0:0"  
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      # THESE MUST BE IN-CONTAINER PATHS:
      HOST_DAGS_PATH:            ${PWD}/dags
      HOST_TRUSTED_ZONE_PATH:    ${PWD}/trusted_zone
      HOST_EXPLOIT_ZONE_PATH:    ${PWD}/exploitation_zone
      HOST_ML_PATH:              ${PWD}/ML
      HOST_DATA_PATH:            ${PWD}/data

      # **CONTAINER** paths, for your DAG to read/write:
      DAGS_PATH:                 /opt/airflow/dags
      TRUSTED_ZONE_PATH:         /opt/airflow/trusted_zone
      EXPLOIT_ZONE_PATH:         /opt/airflow/exploitation_zone
      ML_PATH:                   /opt/airflow/ML
      DATA_PATH:                 /data
      DUCKDB_PATH:               /data/exploitation_zone.duckdb

      # other envs…
      PINECONE_API_KEY:          ${PINECONE_API_KEY}
      PINECONE_ENV:              ${PINECONE_ENV:-us-east-1}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/dags:/opt/airflow/dags
      - ${PWD}/trusted_zone:/opt/airflow/trusted_zone
      - ${PWD}/exploitation_zone:/opt/airflow/exploitation_zone
      - ${PWD}/ML:/opt/airflow/ML
      - ${PWD}/data:/data
      - airflow_logs:/opt/airflow/logs
    command: >
      bash -c '
        rm -rf /var/lib/apt/lists/* &&
        mkdir -p /var/lib/apt/lists/partial &&
        apt-get update &&
        apt-get install -y mailutils &&
        airflow scheduler
      '
    depends_on:
      - airflow-init

  minio:
    image: minio/minio:RELEASE.2023-12-02T10-51-33Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 5

  minio-create-bucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 10;
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb -p local/delta &&
        mc mb -p local/structured &&
        mc mb -p local/unstructured &&
        mc anonymous set download local/unstructured
      "


volumes:
  postgres_data:
  airflow_logs:
  minio_data:
  data:
    driver: local
    driver_opts:
      type: none
      device: ./data
      o: bind
