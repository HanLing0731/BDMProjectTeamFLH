#!/usr/bin/env python3
import os, duckdb, pandas as pd
from neo4j import GraphDatabase

# env:
DUCKDB = os.environ['EXPLOIT_DB']         # e.g. /data/exploitation_zone.duckdb
NEO_URI, NEO_USER, NEO_PW = os.environ['NEO_URI'], os.environ['NEO_USER'], os.environ['NEO_PW']

# 1) read tables
con = duckdb.connect(DUCKDB)
students = con.execute("SELECT * FROM students").fetchdf()
courses  = con.execute("SELECT * FROM courses").fetchdf()
sc       = con.execute("SELECT * FROM student_course_fact").fetchdf()
perf     = con.execute("SELECT * FROM student_performance_fact").fetchdf()
survey   = con.execute("SELECT * FROM mental_health_summary").fetchdf()  # or raw survey table
con.close()

# 2) connect Neo4j
drv = GraphDatabase.driver(NEO_URI, auth=(NEO_USER, NEO_PW))
def run(tx, cypher, params=None): tx.run(cypher, params or {})

with drv.session() as session:
    # clear
    session.write_transaction(run, "MATCH (n) DETACH DELETE n")

    # load Students
    for r in students.to_dict('records'):
        session.write_transaction(run,
            "CREATE (:Student {id:$id, age_band:$age_band, gender:$gender, CGPA:$CGPA})", r)

    # load Courses
    for r in courses.to_dict('records'):
        session.write_transaction(run,
            "CREATE (:Course {module:$code_module, pres:$code_presentation, length:$module_presentation_length})", r)

    # ENROLLED_IN edges
    for r in sc.to_dict('records'):
        session.write_transaction(run, """
          MATCH (s:Student {id:$id_student}), (c:Course {module:$code_module, pres:$code_presentation})
          CREATE (s)-[:ENROLLED_IN {
             prev_attempts:$num_of_prev_attempts, final_result:$final_result,
             date_reg:$date_registration, date_unreg:$date_unregistration
           }]->(c)
        """, r)

    # performance edges
    for r in perf.to_dict('records'):
        session.write_transaction(run, """
          MATCH (s:Student {id:$id_student}), (a:Assessment {id:$id_assessment})
          CREATE (s)-[:TOOK {score:$score, date_submitted:$date_submitted}]->(a)
        """, r)
        # also link Assessment->Course
        session.write_transaction(run, """
          MATCH (a:Assessment {id:$id_assessment}),
                (c:Course {module:$code_module, pres:$code_presentation})
          CREATE (a)-[:BELONGS_TO]->(c)
        """, r)

    # survey edges
    surveys = con = duckdb.connect(DUCKDB).execute(
       "SELECT id_student, Stress_Level, Depression_Score, Anxiety_Score FROM students_mental_health_survey"
    ).fetchdf().to_dict('records')
    for r in surveys:
        session.write_transaction(run, """
          MATCH (s:Student {id:$id_student})
          CREATE (s)-[:SURVEYED {
            Stress_Level:$Stress_Level,
            Depression_Score:$Depression_Score,
            Anxiety_Score:$Anxiety_Score
          }]->(:HealthSurvey)
        """, r)
