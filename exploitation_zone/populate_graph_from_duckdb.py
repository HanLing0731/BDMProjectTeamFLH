#!/usr/bin/env python3
import os
import duckdb
from neo4j import GraphDatabase, basic_auth

# ─── CONFIG ────────────────────────────────────────────────────────────────
TRUSTED_DB = os.environ['TRUSTED_DB']   # e.g. /data/trusted_zone.duckdb
NEO_URI    = os.environ['NEO_URI']
NEO_USER   = os.environ['NEO_USER']
NEO_PW     = os.environ['NEO_PW']

# ─── NEO4J DRIVER ─────────────────────────────────────────────────────────
driver = GraphDatabase.driver(NEO_URI, auth=basic_auth(NEO_USER, NEO_PW))
def run(tx, cypher, params=None):
    tx.run(cypher, params or {})

# ─── EXTRACT FROM DUCKDB ─────────────────────────────────────────────────
con = duckdb.connect(TRUSTED_DB)

students = con.execute("""
  SELECT id_student, age_band, gender, CGPA
    FROM students
""").fetchdf()

courses = con.execute("""
  SELECT code_module, code_presentation, module_presentation_length
    FROM courses
""").fetchdf()

assessments = con.execute("""
  SELECT id_assessment, code_module, code_presentation, weight
    FROM assessments
""").fetchdf()

student_assessments = con.execute("""
  SELECT sa.id_student,
         sa.id_assessment,
         sa.score,
         sa.date_submitted,
         a.code_module,
         a.code_presentation
    FROM studentAssessment AS sa
    JOIN assessments AS a
      ON sa.id_assessment = a.id_assessment
""").fetchdf()

student_courses = con.execute("""
  SELECT id_student,
         code_module,
         code_presentation,
         num_of_prev_attempts,
         final_result
    FROM student_course
""").fetchdf()

surveys = con.execute("""
  SELECT id_student AS survey_id,
         Stress_Level,
         Depression_Score,
         Anxiety_Score
    FROM students_mental_health_survey
""").fetchdf()

admissions = con.execute("""
  SELECT id_student,
         "Date of Admission"    AS date_admission,
         Doctor                 AS doctor,
         "Room Number"          AS room,
         "Billing Amount"       AS billing
    FROM healthcare_dataset_updated
""").fetchdf()

con.close()

# ─── POPULATE NEO4J ────────────────────────────────────────────────────────
with driver.session() as session:
    session.execute_write(run, "MATCH (n) DETACH DELETE n")

    # Students
    for r in students.to_dict('records'):
        session.execute_write(run, """
            CREATE (:Student {
              id:       $id_student,
              age_band: $age_band,
              gender:   $gender,
              CGPA:     $CGPA
            })
        """, r)

    # Courses
    for r in courses.to_dict('records'):
        session.execute_write(run, """
            CREATE (:Course {
              module:       $code_module,
              presentation: $code_presentation,
              length:       $module_presentation_length
            })
        """, r)

    # Assessments
    for r in assessments.to_dict('records'):
        session.execute_write(run, """
            CREATE (:Assessment {
              id:           $id_assessment,
              module:       $code_module,
              presentation: $code_presentation,
              weight:       $weight
            })
        """, r)

    # MentalHealthSurvey + SURVEYED
    for r in surveys.to_dict('records'):
        session.execute_write(run, """
            CREATE (:MentalHealthSurvey {
              survey_id:        $survey_id,
              Stress_Level:     $Stress_Level,
              Depression_Score: $Depression_Score,
              Anxiety_Score:    $Anxiety_Score
            })
        """, r)
        session.execute_write(run, """
            MATCH (s:Student {id: $survey_id})
            MATCH (m:MentalHealthSurvey {survey_id: $survey_id})
            CREATE (s)-[:SURVEYED]->(m)
        """, {"survey_id": r["survey_id"]})

    # HealthData + ADMITTED
    for r in admissions.to_dict('records'):
        session.execute_write(run, """
            CREATE (:HealthData {
              date_admission: $date_admission,
              doctor:         $doctor,
              room:           $room,
              billing:        $billing
            })
        """, r)
        session.execute_write(run, """
            MATCH (s:Student {id: $id_student})
            MATCH (h:HealthData {date_admission: $date_admission})
            CREATE (s)-[:ADMITTED]->(h)
        """, r)

    # ENROLLED_IN 
    for r in student_courses.to_dict('records'):
        session.execute_write(run, """
            MATCH (s:Student {id: $id_student})
            MATCH (c:Course {module: $code_module, presentation: $code_presentation})
            CREATE (s)-[:ENROLLED_IN {
              prev_attempts: $num_of_prev_attempts,
              final_result:  $final_result
            }]->(c)
        """, r)

    # TOOK + BELONGS_TO
    for r in student_assessments.to_dict('records'):
        session.execute_write(run, """
            MATCH (s:Student {id: $id_student})
            MATCH (a:Assessment {id: $id_assessment})
            CREATE (s)-[:TOOK {
              score:          $score,
              date_submitted: $date_submitted
            }]->(a)
        """, r)
        session.execute_write(run, """
            MATCH (a:Assessment {id: $id_assessment})
            MATCH (c:Course {module: $code_module, presentation: $code_presentation})
            CREATE (a)-[:BELONGS_TO]->(c)
        """, r)

print("Graph import complete.")
