import duckdb
from neo4j import GraphDatabase
import pandas as pd

# --- CONFIG ---
DUCKDB_PATH = "path/to/your.duckdb"
NEO4J_URI = "bolt://localhost:7687"
NEO4J_USER = "neo4j"
NEO4J_PASSWORD = "P@$$w0rd"

# --- LOAD FROM DUCKDB ---
con = duckdb.connect(DUCKDB_PATH)

students_df = con.execute("""
    SELECT id_student, CGPA, age_band, gender
    FROM student_dim
""").fetchdf()

courses_df = con.execute("""
    SELECT code_module, code_presentation, module_presentation_length
    FROM course_dim
""").fetchdf()

enrollments_df = con.execute("""
    SELECT id_student, code_module, code_presentation, final_result
    FROM student_course_fact
""").fetchdf()

mental_health_df = con.execute("""
    SELECT id_student, Stress_Level, Depression_Score, Anxiety_Score
    FROM students_mental_health_survey
""").fetchdf()

assessments_df = con.execute("""
    SELECT id_student, id_assessment, score
    FROM student_performance_fact
""").fetchdf()

# --- CONNECT TO NEO4J ---
driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

# --- DEFINE TRANSACTIONS ---
def create_student_nodes(tx, df):
    for _, row in df.iterrows():
        tx.run("""
            MERGE (s:Student {id: $id})
            SET s.CGPA = $cgpa, s.age_band = $age, s.gender = $gender
        """, id=row.id_student, cgpa=row.CGPA, age=row.age_band, gender=row.gender)

def create_course_nodes(tx, df):
    for _, row in df.iterrows():
        tx.run("""
            MERGE (c:Course {code_module: $mod, code_presentation: $pres})
            SET c.module_presentation_length = $length
        """, mod=row.code_module, pres=row.code_presentation, length=row.module_presentation_length)

def create_enrollment_rels(tx, df):
    for _, row in df.iterrows():
        tx.run("""
            MATCH (s:Student {id: $id}), (c:Course {code_module: $mod, code_presentation: $pres})
            MERGE (s)-[r:ENROLLED_IN]->(c)
            SET r.final_result = $result
        """, id=row.id_student, mod=row.code_module, pres=row.code_presentation, result=row.final_result)

def add_mental_health(tx, df):
    for _, row in df.iterrows():
        tx.run("""
            MATCH (s:Student {id: $id})
            SET s.stress = $stress, s.depression = $depression, s.anxiety = $anxiety
        """, id=row.id_student, stress=row.Stress_Level, depression=row.Depression_Score, anxiety=row.Anxiety_Score)

def create_assessment_rels(tx, df):
    for _, row in df.iterrows():
        tx.run("""
            MATCH (s:Student {id: $id})
            MERGE (a:Assessment {id: $assess_id})
            MERGE (s)-[r:SUBMITTED]->(a)
            SET r.score = $score
        """, id=row.id_student, assess_id=row.id_assessment, score=row.score)

# --- EXECUTE IMPORT ---
with driver.session() as session:
    session.write_transaction(create_student_nodes, students_df)
    session.write_transaction(create_course_nodes, courses_df)
    session.write_transaction(create_enrollment_rels, enrollments_df)
    session.write_transaction(add_mental_health, mental_health_df)
    session.write_transaction(create_assessment_rels, assessments_df)

# --- CLEANUP ---
driver.close()
con.close()
