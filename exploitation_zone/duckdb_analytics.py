# exploitation_zone/duckdb_analytics.py

import duckdb
import os
from pathlib import Path

def build_exploitation_zone(trusted_path: str, exploit_path: str):
    # 1) ensure the exploitation folder exists
    Path(exploit_path).parent.mkdir(parents=True, exist_ok=True)

    # 2) open (or create) the exploitation DB
    con = duckdb.connect(exploit_path)

    # 3) attach the trusted DB under the alias "trusted"
    con.execute(f"ATTACH DATABASE '{trusted_path}' AS trusted;")

    # 4) build analytics tables by selecting from trusted.<table>
    con.execute("""
        CREATE OR REPLACE TABLE student_dim AS
        SELECT DISTINCT id_student, age_band, gender, CGPA
          FROM trusted.students;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE course_dim AS
        SELECT DISTINCT code_module, code_presentation, module_presentation_length
          FROM trusted.courses;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE student_course_fact AS
        SELECT sc.id_student,
               sc.code_module,
               sc.code_presentation,
               sc.num_of_prev_attempts,
               sc.final_result,
               sr.date_registration,
               sr.date_unregistration
          FROM trusted.student_course sc
          LEFT JOIN trusted.studentRegistration sr
            ON sc.id_student = sr.id_student
           AND sc.code_module = sr.code_module
           AND sc.code_presentation = sr.code_presentation;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE avg_cgpa_per_course AS
        SELECT sc.code_module,
               sc.code_presentation,
               AVG(s.CGPA) AS avg_cgpa
          FROM trusted.student_course sc
          JOIN trusted.students s
            ON sc.id_student = s.id_student
         GROUP BY sc.code_module, sc.code_presentation;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE mental_health_summary AS
        SELECT
            AVG(Stress_Level)     AS avg_stress,
            AVG(Depression_Score) AS avg_depression,
            AVG(Anxiety_Score)    AS avg_anxiety
          FROM trusted.students_mental_health_survey;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE student_performance_fact AS
        SELECT sa.id_student,
               sa.id_assessment,
               a.code_module,
               a.code_presentation,
               a.weight,
               sa.score,
               sa.date_submitted
          FROM trusted.studentAssessment sa
          JOIN trusted.assessments a
            ON sa.id_assessment = a.id_assessment;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE healthcare_kpis AS
        SELECT
            COUNT(*)              AS num_records,
            AVG("Billing Amount") AS avg_billing,
            MAX("Billing Amount") AS max_billing
          FROM trusted.healthcare_dataset_updated;
    """)

    con.execute("""
        CREATE OR REPLACE TABLE student_struggle_signals AS
        SELECT
            s.id_student,
            s.CGPA,
            mh.Stress_Level,
            mh.Depression_Score,
            mh.Anxiety_Score,
            hc."Billing Amount"    AS billing_amount,
            COUNT(DISTINCT sp.id_assessment) AS num_assessments,
            AVG(sp.score)                   AS avg_score,
            COUNT(sc.id_student)
                FILTER (WHERE sc.date_unregistration IS NOT NULL) AS dropouts
          FROM trusted.students s
          LEFT JOIN trusted.students_mental_health_survey mh
            ON s.id_student = mh.id_student
          LEFT JOIN trusted.healthcare_dataset_updated hc
            ON s.id_student = hc.id_student
          LEFT JOIN student_performance_fact sp
            ON s.id_student = sp.id_student
          LEFT JOIN student_course_fact sc
            ON s.id_student = sc.id_student
         GROUP BY
            s.id_student,
            s.CGPA,
            mh.Stress_Level,
            mh.Depression_Score,
            mh.Anxiety_Score,
            billing_amount;
    """)

    con.close()


if __name__ == "__main__":
    TRUSTED_DB = os.environ['TRUSTED_DB']
    EXPLOIT_DB = os.environ['EXPLOIT_DB']
    build_exploitation_zone(TRUSTED_DB, EXPLOIT_DB)
    print(f"Built all exploitation-zone tables in {EXPLOIT_DB}")
